// Headers generated with ktool v2.0.0
// https://github.com/cxnder/ktool | pip3 install k2l
// Platform: IOS | Minimum OS: 16.5.0 | SDK: 16.5.0


#ifndef VKMAPVIEW_H
#define VKMAPVIEW_H

@class CALayer, NSString, NSMutableArray, CADisplay, NSArray, GEOMapRegion, GEOPOICategoryFilter;
@protocol VKMapViewCameraDelegate, VKMapViewDelegate;


#import "VKMapCanvas.h"
#import "VKClassicGlobeCanvas.h"
#import "VKTimedAnimation.h"
#import "VKNotificationObserver.h"
#import "VKMapCameraController.h"
#import "VKDaVinciCameraController.h"
#import "VKNavCameraController.h"
#import "VKNavContext.h"
#import "MDARController.h"
#import "VKRouteContext.h"
#import "VKPolylineOverlay.h"
#import "VKSceneConfiguration.h"
#import "VKLabelMarker.h"
#import "VKPuckAnimator.h"

@interface VKMapView : CALayer {
    optional<VKMapType> _mapType;
    VKMapCanvas *_canvas;
    VKClassicGlobeCanvas *_globe;
    mutex _mapDelegateMutex;
    BOOL _loaderOpen;
    NSString *_tileLoaderClientID;
    unsigned char _emphasis;
    VKTimedAnimation *_edgeInsetAnimation;
    VKEdgeInsets _animatingToEdgeInsets;
    BOOL _isChangingMapType;
    BOOL _isChangingCenterPointWithoutAnimating;
    CGFloat _verticalYaw;
    unsigned char _usage;
    unsigned char _mapkitUsage;
    VKNotificationObserver *_notificationObserver;
    NSInteger _navigationDisplayRate;
    BOOL _isInBackground;
    VKMapCameraController *_mapCameraController;
    VKDaVinciCameraController *_davinciMapCameraController;
    VKNavCameraController *_navigationCameraController;
    _retain_ptr<VKMuninCameraController *, geo::_retain_objc_arc, geo::_release_objc_arc, geo::_hash_objc, geo::_equal_objc> _muninCameraController;
    _retain_ptr<VKARWalkingCameraController *, geo::_retain_objc_arc, geo::_release_objc_arc, geo::_hash_objc, geo::_equal_objc> _arWalkingCameraController;
    VKNavContext *_navContext;
    Coordinate3D<geo::Radians, double> _lastAnimatedUserCoordinate;
    Unit<geo::RadianUnitDescription, double> _lastAnimatedCourse;
    unique_ptr<md::MapEngine, std::default_delete<md::MapEngine>> _mapEngine;
    BOOL _didFinishSnapshotting;
    int _flyoverMode;
    MDARController *_arController;
    _retain_ptr<VKStateCaptureHandler *, geo::_retain_objc_arc, geo::_release_objc_arc, geo::_hash_objc, geo::_equal_objc> _stateCaptureHandler;
    _retain_ptr<VKCamera *, geo::_retain_objc_arc, geo::_release_objc_arc, geo::_hash_objc, geo::_equal_objc> _vkCamera;
    VKRouteContext *_routeContext;
    _retain_ptr<NSSet<NSNumber *> *, geo::_retain_objc_arc, geo::_release_objc_arc, geo::_hash_objc, geo::_equal_objc> _selectedBuildingFeatureIds;
    unique_ptr<md::DisplayOptions, std::default_delete<md::DisplayOptions>> _displayOptions;
    NSInteger _navViewMode;
    unsigned char _thermalLevel;
    int _thermalNotificationToken;
    NSUInteger _thermalPressureLevel;
    _retain_ptr<VKManifestTileGroupObserverProxy *, geo::_retain_objc_arc, geo::_release_objc_arc, geo::_hash_objc, geo::_equal_objc> _manifestTileGroupObserverProxy;
    NSInteger _lastTerrainMode;
    BOOL _lastEnableGlobe;
    BOOL _lastEnableRoundedBuildings;
    BOOL _lastEnableColorizedBuildings;
    BOOL _lastEnableBuildingHeights;
    BOOL _lastEnableAdvancedLighting;
    BOOL _lastEnableAdvancedWater;
    NSMutableArray *_mapsFeatureListeners;
    ? _mapDisplayStyle;
    BOOL _displayStyleOverrideEnabled;
}


@property (readonly, nonatomic) CGFloat altitude;
@property (readonly, nonatomic, getter=isAnimatingToTrackAnnotation) BOOL animatingToTrackAnnotation;
@property (nonatomic) ? annotationTrackingBehavior;
@property (nonatomic) NSInteger annotationTrackingHeadingAnimationDisplayRate;
@property (nonatomic) unsigned char applicationState; // ivar: _applicationState
@property (nonatomic) NSInteger applicationUILayout;
@property (weak, nonatomic) NSObject<VKMapViewCameraDelegate> *cameraDelegate;
@property (readonly, nonatomic) BOOL canEnter3DMode;
@property (readonly, nonatomic) BOOL canShowFlyover;
@property (readonly, nonatomic) BOOL canShowFlyoverAnimation;
@property (readonly, nonatomic) ? centerCoordinate;
@property (nonatomic) BOOL compressedBuildingsEnabled; // ivar: _compressedBuildingsEnabled
@property (nonatomic) BOOL debugLayoutContinuously;
@property (nonatomic) NSInteger displayRate;
@property (nonatomic) unsigned char displayedSearchResultsType; // ivar: _displayedSearchResultsType
@property (nonatomic) VKEdgeInsets edgeInsets;
@property (nonatomic) BOOL enableAdvancedLighting;
@property (nonatomic) BOOL enableAdvancedWater;
@property (nonatomic) BOOL enableBuildingHeights;
@property (nonatomic) BOOL enableColorizedBuildings;
@property (readonly, nonatomic) BOOL enableDebugLabelHighlighting;
@property (nonatomic) BOOL enableGlobe;
@property (nonatomic) BOOL enableRoundedBuildings;
@property (readonly, nonatomic) int flyoverMode;
@property (retain, nonatomic) VKPolylineOverlay *focusedLabelsPolyline;
@property (readonly, nonatomic, getter=isFullyDrawn) BOOL fullyDrawn;
@property (nonatomic) VKEdgeInsets fullyOccludedEdgeInsets;
@property (readonly, nonatomic, getter=isFullyPitched) BOOL fullyPitched;
@property (nonatomic, getter=isGesturing) BOOL gesturing;
@property (readonly, nonatomic) BOOL hasTraffic;
@property (readonly, nonatomic) CGFloat heading;
@property (retain, nonatomic) CADisplay *hostDisplay;
@property (nonatomic) BOOL iconsShouldAlignToPixels;
@property (nonatomic) BOOL isMKRenderingSelectionBalloon;
@property (nonatomic) BOOL isPitchable;
@property (readonly, nonatomic) BOOL isShowingCuratedElevatedGround;
@property (nonatomic) VKEdgeInsets labelEdgeInsets;
@property (nonatomic) VKEdgeInsets labelEdgeWidths;
@property (nonatomic, getter=isLabelMarkerSelectionEnabled) BOOL labelMarkerSelectionEnabled;
@property (readonly, nonatomic) NSArray *labelMarkers;
@property (nonatomic) NSInteger labelScaleFactor;
@property (nonatomic) BOOL loadMuninAvailability;
@property (nonatomic) BOOL localizeLabels;
@property (readonly, nonatomic) VKMapCanvas *mapCanvas;
@property (weak, nonatomic) NSObject<VKMapViewDelegate> *mapDelegate; // ivar: _mapDelegate
@property (nonatomic) ? mapDisplayStyle;
@property (readonly, nonatomic) *void mapEngine;
@property (nonatomic) unsigned char mapKitUsage; // ivar: _mapKitUsage
@property (readonly, nonatomic) GEOMapRegion *mapRegion;
@property (readonly, nonatomic) GEOMapRegion *mapRegionIgnoringEdgeInsets;
@property (nonatomic) int mapType;
@property (readonly, nonatomic) unsigned char mapsUsage; // ivar: _mapsUsage
@property (readonly, nonatomic, getter=maxPitch) CGFloat maxPitch;
@property (readonly, nonatomic, getter=minPitch) CGFloat minPitch;
@property (nonatomic) NSInteger navigationDisplayRate;
@property (nonatomic) NSInteger navigationShieldSize;
@property (readonly, nonatomic) CGFloat pitch;
@property (readonly, nonatomic, getter=isPitched) BOOL pitched;
@property (retain, nonatomic) GEOPOICategoryFilter *pointsOfInterestFilter; // ivar: _pointsOfInterestFilter
@property (readonly, nonatomic) CGFloat presentationYaw;
@property (nonatomic) BOOL renderInverseFills;
@property (nonatomic) BOOL renderOverlayPolygons;
@property (nonatomic) BOOL rendersInBackground;
@property (readonly, nonatomic) VKSceneConfiguration *sceneConfiguration;
@property (readonly, nonatomic, getter=getSceneState) NSUInteger sceneState;
@property (readonly, nonatomic) VKLabelMarker *selectedLabelMarker;
@property (nonatomic) NSInteger shieldIdiom;
@property (nonatomic) NSInteger shieldSize;
@property (nonatomic) BOOL shouldLoadFallbackTiles;
@property (nonatomic) BOOL shouldLoadMapMargin;
@property (readonly, nonatomic, getter=isShowingFlyover) BOOL showingFlyover;
@property (nonatomic) BOOL showsBuildings;
@property (nonatomic) BOOL showsPointLabels;
@property (nonatomic) BOOL showsPointsOfInterest;
@property (nonatomic) BOOL showsRoadLabels;
@property (nonatomic) BOOL showsRoadShields;
@property (nonatomic) BOOL showsVenues;
@property (nonatomic) BOOL staysCenteredDuringPinch;
@property (nonatomic) BOOL staysCenteredDuringRotation;
@property (nonatomic) float styleZOffsetScale;
@property (readonly, nonatomic) BOOL supportsGPUFrameCaptureToDestination;
@property (nonatomic) NSInteger targetDisplay;
@property (nonatomic) NSInteger terrainMode;
@property (nonatomic) BOOL trackingCameraShouldHandleGestures;
@property (nonatomic) CGFloat trackingZoomScale;
@property (nonatomic) BOOL trafficEnabled;
@property (nonatomic) BOOL trafficIncidentsEnabled;
@property (readonly, nonatomic) VKPuckAnimator *userLocationAnimator; // ivar: _userLocationAnimator
@property (nonatomic) ? vehicleState;
@property (nonatomic) BOOL virtualParallaxEnabled;
@property (readonly, nonatomic) NSArray *visibleTileSets;
@property (readonly, nonatomic) CGFloat yaw;


+(BOOL)_elevatedGroundIsAvailable;
+(BOOL)_elevatedGroundIsEnabled;
+(BOOL)_globeIsAvailable;
+(BOOL)_globeIsEnabled;
-(*void)_labelSettings;
-(BOOL)_advancedLightingAllowed;
-(BOOL)_advancedWaterAllowed;
-(BOOL)_buildingHeightsAllowed;
-(BOOL)_colorizedBuildingsAllowed;
-(BOOL)_createDisplayLayer;
-(BOOL)_daVinciDataAvailable;
-(BOOL)_modernMapAllowed;
-(BOOL)_roundedBuildingsAllowed;
-(BOOL)buildingFootprintsDisabled;
-(BOOL)canEnter3DModeFlyoverForTileSize:(NSInteger)arg0 ;
-(BOOL)canRotate;
-(BOOL)canZoomInForTileSize:(NSInteger)arg0 ;
-(BOOL)canZoomOutForTileSize:(NSInteger)arg0 ;
-(BOOL)cancelPendingMove;
-(BOOL)displayedFloorIsDefaultForVenueBuilding:(id)arg0 ;
-(BOOL)gridDisabled;
-(BOOL)isChangingRegionWithoutAnimating;
-(BOOL)isDimmingBaseMap;
-(BOOL)isEffectivelyHidden;
-(BOOL)isLoadingMuninMetadata;
-(BOOL)isPointValidForGesturing:(struct CGPoint )arg0 ;
-(BOOL)labelsDisabled;
-(BOOL)moveToMarker:(id)arg0 withHeading:(CGFloat)arg1 animated:(BOOL)arg2 completionHandler:(id)arg3 ;
-(BOOL)moveToStorefrontView:(id)arg0 animated:(BOOL)arg1 completionHandler:(id)arg2 ;
-(BOOL)polygonsDisabled;
-(BOOL)rastersDisabled;
-(BOOL)roadsDisabled;
-(BOOL)shouldHideOffscreenSelectedAnnotation;
-(BOOL)stylesheetIsDevResource;
-(BOOL)supportsMapType:(int)arg0 ;
-(BOOL)supportsNightMode;
-(BOOL)tapAtPoint:(struct CGPoint )arg0 ;
-(BOOL)transitLinesDisabled;
-(BOOL)wantsTimerTick;
-(CGFloat)currentZoomLevelForTileSize:(NSInteger)arg0 ;
-(CGFloat)distanceFromPoint:(struct CGPoint )arg0 toPoint:(struct CGPoint )arg1 fromLayer:(id)arg2 withPrecision:(NSInteger)arg3 ;
-(CGFloat)durationToAnimateToMapRegion:(id)arg0 ;
-(CGFloat)maximumZoomLevelForTileSize:(NSInteger)arg0 ;
-(CGFloat)minimumZoomLevelForTileSize:(NSInteger)arg0 ;
-(CGFloat)topDownMinimumZoomLevelForTileSize:(NSInteger)arg0 ;
-(CGFloat)zoomLevelAdjustmentForTileSize:(NSInteger)arg0 ;
-(NSInteger)carDisplayConfig;
-(NSInteger)carDisplayType;
-(NSInteger)currentMapMode;
-(NSInteger)getCurrentSetARInterfaceOrientation;
-(float)currentZoomLevel;
-(float)worldSpaceWidthOfView;
-(float)zoomToRevealVenueBuildingFloorplan:(id)arg0 ;
-(float)zoomToRevealVenueFloorplan:(id)arg0 ;
-(id)activeLogics;
-(id)annotationCoordinateTest:(SEL)arg0 ;
-(id)annotationRectTest:(SEL)arg0 ;
-(id)arWalkingDebugOutput;
-(id)attributionsForCurrentRegion;
-(id)buildingMarkerAtPoint:(struct CGPoint )arg0 ;
-(id)clearVenueBuildingFloorSelections;
-(id)consoleString:(BOOL)arg0 ;
-(id)currentCanvas;
-(id)currentMarker;
-(id)debugLabelString:(BOOL)arg0 ;
-(id)detailedDescription;
-(id)detailedDescriptionDictionaryRepresentation;
-(id)iconForStyleAttributes:(id)arg0 contentScale:(CGFloat)arg1 size:(NSInteger)arg2 transparent:(BOOL)arg3 ;
-(id)initShouldRasterize:(BOOL)arg0 inBackground:(BOOL)arg1 contentScale:(CGFloat)arg2 auditToken:(id)arg3 mapViewPurpose:(NSInteger)arg4 ;
-(id)initShouldRasterize:(BOOL)arg0 inBackground:(BOOL)arg1 contentScale:(CGFloat)arg2 auditToken:(id)arg3 mapViewPurpose:(NSInteger)arg4 allowsAntialiasing:(BOOL)arg5 ;
-(id)initWithDescriptor:(id)arg0 ;
-(id)labelMarkerForCustomFeatureAnnotation:(id)arg0 ;
-(id)labelMarkerForCustomFeatureAnnotation:(id)arg0 dataSource:(id)arg1 ;
-(id)labelMarkerForSelectionAtPoint:(struct CGPoint )arg0 selectableLabelsOnly:(BOOL)arg1 ;
-(id)markerAtPoint:(struct CGPoint )arg0 ;
-(id)muninMarkerAtCoordinate:(struct ? )arg0 ;
-(id)muninMarkerAtCoordinate:(struct ? )arg0 completeMarkerHandler:(id)arg1 ;
-(id)navigationPuck;
-(id)onscreenImageResources;
-(id)pptTileStatisticsForMapType:(int)arg0 latitude:(CGFloat)arg1 longitude:(CGFloat)arg2 zoom:(float)arg3 width:(CGFloat)arg4 height:(CGFloat)arg5 rect:(struct ? )arg6 ;
-(id)rapMarkerAtPoint:(struct CGPoint )arg0 ;
-(id)resolveMapCameraController;
-(id)roadLabelTilesInScene;
-(id)routeContext;
-(id)secondaryCanvas;
-(id)selectedTransitLineIDs;
-(id)setARWalkingFeatureSet:(id)arg0 ;
-(id)testStatistics;
-(id)tileStatistics;
-(id)transitLineMarkersForSelectionAtPoint:(struct CGPoint )arg0 ;
-(id)transitLineMarkersInCurrentViewport;
-(id)venueAtLocation:(struct ? )arg0 ;
-(id)venueAtLocation:(struct ? )arg0 withMarginForError:(BOOL)arg1 ;
-(id)venueAtLocation:(struct ? )arg0 withMarginForError:(BOOL)arg1 includeNonRevealedVenues:(BOOL)arg2 ;
-(id)venueBuildingWithFocus;
-(id)venueWithFocus;
-(id)venueWithID:(NSUInteger)arg0 ;
-(int)arMode;
-(int)arSceneType;
-(short)defaultFloorOrdinalForVenueBuilding:(id)arg0 ;
-(short)displayedFloorOrdinalForVenueBuilding:(id)arg0 ;
-(struct ? )convertPoint:(struct CGPoint )arg0 toCoordinateFromLayer:(id)arg1 ;
-(struct ? )convertPoint:(struct CGPoint )arg0 toMapPointFromLayer:(id)arg1 ;
-(struct CGPoint )convertCoordinate:(struct ? )arg0 toCameraModelPointToLayer:(id)arg1 ;
-(struct CGPoint )convertCoordinate:(struct ? )arg0 toPointToLayer:(id)arg1 ;
-(struct CGPoint )convertMapPoint:(struct ? )arg0 toPointToLayer:(id)arg1 ;
-(struct optional<double> )puckAnimator:(id)arg0 getElevationWithCoordinate:(*void)arg1 ;
-(struct unordered_map<unsigned int, unsigned long long, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<const unsigned int, unsigned long long>>> )clientStyleAttributes;
-(unsigned char)emphasis;
-(void)_applyMapDisplayStyle:(struct ? )arg0 animated:(BOOL)arg1 duration:(CGFloat)arg2 ;
-(void)_closeLoaderConnection:(BOOL)arg0 ;
-(void)_configureDefaultSettings;
-(void)_createGlobe;
-(void)_forceLayoutForSuspensionSnapShot;
-(void)_notifyDelegateFlyoverTourLabelChanged:(id)arg0 ;
-(void)_postDelegateCallbackBlock:(id)arg0 ;
-(void)_reconfigurePermissions;
-(void)_runFlyoverTourStateChange:(int)arg0 completion:(id)arg1 ;
-(void)_setARSession:(id)arg0 ;
-(void)_setFloorSwitcherZoomPadding:(float)arg0 ;
-(void)_setThermalPressureLevel:(NSUInteger)arg0 ;
-(void)_setupThermalMonitor;
-(void)_shutdownThermalMonitor;
-(void)_updateBackgroundColor;
-(void)_updateBuildingCompressionSetting;
-(void)_updateMapDisplayStyle;
-(void)_updateNavCameraThermalOptions;
-(void)_updateOnlyShowRoadClosures;
-(void)_updateThermalPressureLevel;
-(void)activateInternalSettings;
-(void)activeARWalkingFeatureDidUpdate:(id)arg0 ;
-(void)addCustomFeatureDataSource:(id)arg0 ;
-(void)addExternalAnchor:(id)arg0 ;
-(void)addOverlay:(id)arg0 ;
-(void)addPersistentRouteOverlay:(id)arg0 ;
-(void)addRouteOverlay:(id)arg0 ;
-(void)arController:(id)arg0 arSessionWasInterrupted:(NSUInteger)arg1 ;
-(void)arController:(id)arg0 didChangeTrackingState:(NSUInteger)arg1 reason:(NSUInteger)arg2 ;
-(void)arController:(id)arg0 didEncounterError:(id)arg1 ;
-(void)arControllerSessionInterruptionEnded:(id)arg0 ;
-(void)arWalkingElevationRequestFailure:(id)arg0 ;
-(void)arWalkingFeatureSetStateDidUpdate:(id)arg0 ;
-(void)clearPreviouslySelectedLabelMarker;
-(void)clearScene;
-(void)closeLoaderConnection;
-(void)dealloc;
-(void)debugHighlightFeatureMarker:(*void)arg0 ;
-(void)debugHighlightLabelAtPoint:(struct CGPoint )arg0 ;
-(void)deselectFeatureId;
-(void)deselectLabelMarker;
-(void)deselectTransitLineMarker;
-(void)deselectVenuePoiFeatureId;
-(void)didEnterBackground;
-(void)didFinishDaVinciTransition;
-(void)didFinishLoadingData;
-(void)didFinishLoadingDataWithError:(id)arg0 ;
-(void)didFinishSnapshotting;
-(void)didPresent;
-(void)didReceiveFlushTileCaches;
-(void)didReceiveLocalChanged;
-(void)didReceiveMemoryWarning;
-(void)didStartLoadingData;
-(void)didUpdateSceneStatus:(unsigned char)arg0 ;
-(void)didUpdateVerticalYawTo:(CGFloat)arg0 ;
-(void)disableMapDisplayStyleDebugOverride;
-(void)disableTestStatistics;
-(void)disableTileStatistics;
-(void)enableMapDisplayStyleDebugOverride:(struct ? )arg0 ;
-(void)enableTestStatistics;
-(void)enableTileStatistics;
-(void)enableViewDataLoading:(BOOL)arg0 ;
-(void)enter3DMode;
-(void)enterARModeAtCoordinate:(struct ? )arg0 ;
-(void)enterARWalking:(id)arg0 ;
-(void)enterMuninForMarker:(id)arg0 withHeading:(CGFloat)arg1 ;
-(void)enterMuninForStorefrontView:(id)arg0 secondaryStorefrontView:(id)arg1 ;
-(void)exit3DMode;
-(void)exitARMode;
-(void)exitARWalking;
-(void)flushTileLoads;
-(void)forceCameraUpdateForFrameResize;
-(void)forceFrame;
-(void)forceLayout;
-(void)forceResolveCameraController;
-(void)goToTileX:(int)arg0 Y:(int)arg1 Z:(int)arg2 tileSize:(int)arg3 ;
-(void)injectDebugARFeatures:(id)arg0 ;
-(void)injectDebugARUserRouteCoordinate:(struct PolylineCoordinate )arg0 ;
-(void)insertOverlay:(id)arg0 aboveOverlay:(id)arg1 ;
-(void)insertOverlay:(id)arg0 belowOverlay:(id)arg1 ;
-(void)labelManagerDidLayout;
-(void)labelMarkerDidChangeState:(*void)arg0 ;
-(void)map:(id)arg0 canShowFlyoverDidChange:(BOOL)arg1 ;
-(void)map:(id)arg0 didEnterARMode:(BOOL)arg1 ;
-(void)map:(id)arg0 labelMarkerDidChangeState:(*void)arg1 ;
-(void)map:(id)arg0 selectedLabelMarkerWillDisappear:(*void)arg1 ;
-(void)mapController:(id)arg0 requestsDisplayRate:(NSInteger)arg1 ;
-(void)mapDidFinishChangingMapDisplayStyle:(struct ? )arg0 ;
-(void)mapDidReloadStylesheet:(id)arg0 ;
-(void)mapLabelsDidLayout:(id)arg0 ;
-(void)moveToFlyoverTourStartPosition:(id)arg0 duration:(CGFloat)arg1 completion:(id)arg2 ;
-(void)muninJunctionDidChange:(*void)arg0 currentRoad:(*void)arg1 localize:(BOOL)arg2 ;
-(void)navigationCameraReturnToPuck;
-(void)nearestVenueDidChange:(*void)arg0 building:(*void)arg1 ;
-(void)openLoaderConnection;
-(void)panWithOffset:(struct CGPoint )arg0 relativeToScreenPoint:(struct CGPoint )arg1 animated:(BOOL)arg2 duration:(CGFloat)arg3 completionHandler:(id)arg4 ;
-(void)pauseFlyoverTourAnimation;
-(void)pauseTracking;
-(void)performStylesheetDidChange;
-(void)populateDebugNode:(*void)arg0 withOptions:(*void)arg1 ;
-(void)prepareFlyoverAnimation:(id)arg0 completion:(id)arg1 ;
-(void)projectCoordinate:(struct ? )arg0 toPoint:(struct CGPoint *)arg1 ;
-(void)puckAnimator:(id)arg0 runAnimation:(id)arg1 ;
-(void)puckAnimator:(id)arg0 updatedPosition:(*void)arg1 course:(*void)arg2 ;
-(void)puckAnimator:(id)arg0 updatedTargetPosition:(*void)arg1 ;
-(void)puckAnimatorDidStop:(id)arg0 ;
-(void)puckLocationTracingEvent:(id)arg0 ;
-(void)reloadStylesheet;
-(void)removeCustomFeatureDataSource:(id)arg0 ;
-(void)removeExternalAnchor:(id)arg0 ;
-(void)removeOverlay:(id)arg0 ;
-(void)removePersistentRouteOverlay:(id)arg0 ;
-(void)removeRouteOverlay:(id)arg0 ;
-(void)renderInContext:(struct CGContext *)arg0 ;
-(void)resetTestStatistics;
-(void)resetTileStatistics;
-(void)resumeFlyoverTourAnimation;
-(void)runAnimation:(id)arg0 ;
-(void)selectLabelMarker:(id)arg0 ;
-(void)selectLabelMarker:(id)arg0 completion:(id)arg1 ;
-(void)selectTransitLineMarker:(id)arg0 ;
-(void)selectedLabelMarkerWillDisappear:(*void)arg0 ;
-(void)setARInterfaceOrientation:(NSInteger)arg0 ;
-(void)setARMode:(int)arg0 ;
-(void)setARSceneType:(int)arg0 ;
-(void)setARSession:(id)arg0 ;
-(void)setARWalkingFeatures:(id)arg0 ;
-(void)setBounds:(struct CGRect )arg0 ;
-(void)setCameraFramingInsets:(struct VKEdgeInsets )arg0 ;
-(void)setCameraHorizontalOffset:(CGFloat)arg0 duration:(CGFloat)arg1 timingFunction:(id)arg2 ;
-(void)setCanonicalSkyHeight:(CGFloat)arg0 ;
-(void)setCarDisplayConfig:(NSInteger)arg0 animated:(BOOL)arg1 ;
-(void)setClientLocalizedStrings:(id)arg0 ;
-(void)setContentsScale:(CGFloat)arg0 ;
-(void)setCurrentLocationText:(id)arg0 ;
-(void)setDesiredMapMode:(NSInteger)arg0 ;
-(void)setDimmingBaseMap:(BOOL)arg0 ;
-(void)setDimmingBaseMap:(BOOL)arg0 animated:(BOOL)arg1 duration:(CGFloat)arg2 ;
-(void)setDisableBuildingFootprints:(BOOL)arg0 ;
-(void)setDisableGrid:(BOOL)arg0 ;
-(void)setDisableLabels:(BOOL)arg0 ;
-(void)setDisablePolygons:(BOOL)arg0 ;
-(void)setDisableRasters:(BOOL)arg0 ;
-(void)setDisableRoads:(BOOL)arg0 ;
-(void)setDisableShadows:(BOOL)arg0 ;
-(void)setDisableTransitLines:(BOOL)arg0 ;
-(void)setDisplayedFloorOrdinal:(short)arg0 forVenueBuilding:(id)arg1 ;
-(void)setEmphasis:(unsigned char)arg0 animated:(BOOL)arg1 ;
-(void)setExternalTrafficFeatures:(id)arg0 areRouteTrafficFeaturesActive:(BOOL)arg1 ;
-(void)setHidden:(BOOL)arg0 ;
-(void)setHiddenTrafficIncidentFeatures:(id)arg0 ;
-(void)setLabelExclusionRegions:(id)arg0 ;
-(void)setLoadMuninMetadata:(BOOL)arg0 ;
-(void)setModernMapEnabled:(BOOL)arg0 ;
-(void)setNavContext:(id)arg0 ;
-(void)setNeedsLayout;
-(void)setRegionRestriction:(id)arg0 duration:(CGFloat)arg1 timingFunction:(id)arg2 ;
-(void)setRouteContext:(id)arg0 ;
-(void)setRouteLineSplitAnnotation:(id)arg0 ;
-(void)setRouteUserOffset:(struct PolylineCoordinate )arg0 ;
-(void)setSelectedBuildingFeatureIds:(id)arg0 ;
-(void)setSelectedFeatureId:(NSUInteger)arg0 ;
-(void)setSelectedVenuePoiFeatureId:(NSUInteger)arg0 ;
-(void)setUseSmallCache:(BOOL)arg0 ;
-(void)startFlyoverAnimation:(id)arg0 animateToStart:(BOOL)arg1 completion:(id)arg2 ;
-(void)startFlyoverTourAnimation:(NSUInteger)arg0 animateToStart:(BOOL)arg1 completion:(id)arg2 ;
-(void)startPanningAtPoint:(struct CGPoint )arg0 ;
-(void)startPanningAtPoint:(struct CGPoint )arg0 panAtStartPoint:(BOOL)arg1 ;
-(void)startPinchingWithFocusPoint:(struct CGPoint )arg0 ;
-(void)startPitchingWithFocusPoint:(struct CGPoint )arg0 ;
-(void)startRotatingWithFocusPoint:(struct CGPoint )arg0 ;
-(void)startTrackingAnnotation:(id)arg0 trackHeading:(BOOL)arg1 animated:(BOOL)arg2 duration:(CGFloat)arg3 timingFunction:(id)arg4 ;
-(void)stopFlyoverAnimation;
-(void)stopPanningAtPoint:(struct CGPoint )arg0 ;
-(void)stopPinchingWithFocusPoint:(struct CGPoint )arg0 ;
-(void)stopPitchingWithFocusPoint:(struct CGPoint )arg0 ;
-(void)stopRotatingWithFocusPoint:(struct CGPoint )arg0 ;
-(void)stopSnappingAnimations;
-(void)stopTracking;
-(void)stopTrackingAnnotation;
-(void)tileGroupDidChange;
-(void)transitionToTracking:(BOOL)arg0 mapMode:(NSInteger)arg1 startLocation:(struct ? )arg2 startCourse:(CGFloat)arg3 pounceCompletionHandler:(id)arg4 ;
-(void)updatePanWithTranslation:(struct CGPoint )arg0 ;
-(void)updatePinchWithFocusPoint:(struct CGPoint )arg0 oldFactor:(CGFloat)arg1 newFactor:(CGFloat)arg2 ;
-(void)updatePitchWithFocusPoint:(struct CGPoint )arg0 degrees:(CGFloat)arg1 ;
-(void)updatePitchWithFocusPoint:(struct CGPoint )arg0 translation:(CGFloat)arg1 ;
-(void)updateRotationWithFocusPoint:(struct CGPoint )arg0 newValue:(CGFloat)arg1 ;
-(void)willBecomeFullyDrawn;
-(void)willEnterForeground;
-(void)willLayoutWithTimestamp:(CGFloat)arg0 withContext:(*void)arg1 ;
-(void)willStopPanningAtPoint:(struct CGPoint )arg0 withVelocity:(struct CGPoint )arg1 ;
-(void)zoom:(CGFloat)arg0 withFocusPoint:(struct CGPoint )arg1 completionHandler:(id)arg2 ;
-(void)zoomToLevel:(CGFloat)arg0 withFocusPoint:(struct CGPoint )arg1 ;


@end


#endif