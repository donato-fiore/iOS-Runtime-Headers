// Headers generated with ktool v2.0.0
// https://github.com/cxnder/ktool | pip3 install k2l
// Platform: IOS | Minimum OS: 16.0.0 | SDK: 16.0.0


#ifndef _MTLDEVICE_H
#define _MTLDEVICE_H

@class NSMutableArray, NSString, NSDictionary, NSArray;
@protocol OS_dispatch_queue, MTLRenderPipelineState, MTLComputePipelineState, OS_dispatch_data;

#import <Foundation/Foundation.h>

#import "MTLDeviceFeatureQueries.h"
#import "MTLLoader.h"
#import "MTLGPUBVHBuilder.h"
#import "MTLResourceListPool.h"
#import "MTLArchitecture.h"
#import "MTLCompiler.h"
#import "MTLTargetDeviceArchitecture.h"

@interface _MTLDevice : NSObject {
    ? _limits;
    *void _supportedGPUFamilies;
    NSObject<OS_dispatch_queue> *_pipelineSerializationQueue;
    BOOL _hasInitSerializationPaths;
    NSMutableArray *_progressTrackBufferStack;
    BOOL _needsEncoderTypeMatchingProgressBlits;
    id<MTLRenderPipelineState> *_progressTrackRenderPipeline;
    id<MTLComputePipelineState> *_progressTrackComputePipeline;
    MTLDeviceFeatureQueries *_featureQueries;
    uint8_t _commandQueueCount;
    *void _libraryBuilder;
    *MTLPipelineLibraryBuilder _pipelineLibraryBuilder;
    *void _pipelineCollection;
    NSString *_pipelineDescriptorsOutputFile;
    NSString *_librariesOutputDirectory;
    BOOL _collectAllLibraries;
    BOOL _gpuAssertionsEnabled;
    MTLLoader *_dynamicLoader;
    os_unfair_lock_s _GPUBVHBuilderLock;
    MTLGPUBVHBuilder *_GPUBVHBuilder;
    MTLResourceListPool *_akIOResourceListPool;
    once_flag _initProgressTrackingOnceToken;
    NSDictionary *_pluginData;
    NSObject<OS_dispatch_data> *_serializedPluginData;
    *MTLArchiveMapDB _recompiledBinaryArchiveMap;
    *MTLArchiveUsageDB _binaryArchiveUsage;
    BOOL _isFirstParty;
    BOOL _enableAssetUpgraderDaemon;
    MTLArchitecture *_architecture;
}


@property (readonly, getter=isAnisoSampleFixSupported) BOOL AnisoSampleFixSupported;
@property (readonly, getter=isBCTextureCompressionSupported) BOOL BCTextureCompressionSupported;
@property (readonly, getter=isFixedLinePointFillDepthGradientSupported) BOOL FixedLinePointFillDepthGradientSupported;
@property (readonly) MTLGPUBVHBuilder *GPUBVHBuilder;
@property (readonly, getter=isRGB10A2GammaSupported) BOOL RGB10A2GammaSupported;
@property (readonly, getter=isRTZRoundingSupported) BOOL RTZRoundingSupported;
@property (readonly) unsigned int acceleratorPort;
@property (readonly) MTLArchitecture *architecture;
@property (readonly) NSUInteger argumentBuffersSupport;
@property (readonly, getter=areBarycentricCoordsSupported) BOOL barycentricCoordsSupported;
@property (readonly) NSUInteger bufferRobustnessSupport;
@property (nonatomic) NSUInteger commandBufferErrorOptions; // ivar: _commandBufferErrorOptions
@property (readonly) MTLCompiler *compiler;
@property (readonly) NSObject<OS_dispatch_queue> *concurrentQueue; // ivar: _concurrentQueue
@property (readonly) NSArray *counterSets;
@property (readonly) NSInteger defaultTextureWriteRoundingMode;
@property (readonly) NSUInteger deviceCreationFlags;
@property (readonly) NSUInteger deviceLinearReadOnlyTextureAlignmentBytes;
@property (readonly) NSUInteger deviceLinearTextureAlignmentBytes;
@property (readonly, getter=isFloat32FilteringSupported) BOOL float32FilteringSupported;
@property (readonly) NSUInteger globalTraceObjectID; // ivar: _globalTraceObjectID
@property (getter=areGPUAssertionsEnabled, setter=setGPUAssertionsEnabled:) BOOL gpuAssertionsEnabled;
@property (readonly) IndirectArgumentBufferCapabilities indirectArgumentBufferCapabilities;
@property (readonly) NSUInteger iosurfaceReadOnlyTextureAlignmentBytes;
@property (readonly) NSUInteger iosurfaceTextureAlignmentBytes;
@property (readonly, getter=isLargeMRTSupported) BOOL largeMRTSupported;
@property (readonly) *? limits;
@property (readonly) NSUInteger linearTextureAlignmentBytes;
@property (readonly) NSUInteger linearTextureArrayAlignmentBytes;
@property (readonly) NSUInteger linearTextureArrayAlignmentSlice;
@property (readonly) NSUInteger maxArgumentBufferSamplerCount;
@property (readonly) NSUInteger maxBufferLength;
@property (readonly) NSUInteger maxColorAttachments;
@property (readonly) NSUInteger maxComputeAttributes;
@property (readonly) NSUInteger maxComputeBuffers;
@property (readonly) NSUInteger maxComputeInlineDataSize;
@property (readonly) NSUInteger maxComputeLocalMemorySizes;
@property (readonly) NSUInteger maxComputeSamplers;
@property (readonly) NSUInteger maxComputeTextures;
@property (readonly) NSUInteger maxComputeThreadgroupMemory;
@property (readonly) NSUInteger maxComputeThreadgroupMemoryAlignmentBytes;
@property (readonly) NSUInteger maxConstantBufferArguments;
@property (readonly) NSUInteger maxCustomSamplePositions;
@property (readonly) NSUInteger maxFenceInstances;
@property (readonly) NSUInteger maxFragmentBuffers;
@property (readonly) NSUInteger maxFragmentInlineDataSize;
@property (readonly) NSUInteger maxFragmentSamplers;
@property (readonly) NSUInteger maxFragmentTextures;
@property (readonly) NSUInteger maxFramebufferStorageBits;
@property (readonly) NSUInteger maxFunctionConstantIndices;
@property (readonly) NSUInteger maxIOCommandsInFlight;
@property (readonly) NSUInteger maxIndirectBuffers;
@property (readonly) NSUInteger maxIndirectSamplers;
@property (readonly) NSUInteger maxIndirectSamplersPerDevice;
@property (readonly) NSUInteger maxIndirectTextures;
@property (readonly) NSUInteger maxInterpolants;
@property (readonly) NSUInteger maxInterpolatedComponents;
@property (readonly) float maxLineWidth;
@property (readonly) float maxPointSize;
@property (readonly) NSUInteger maxPredicatedNestingDepth;
@property (readonly) NSUInteger maxRasterizationRateLayerCount;
@property (readonly) NSUInteger maxTessellationFactor;
@property (readonly) NSUInteger maxTextureBufferWidth;
@property (readonly) NSUInteger maxTextureDepth3D;
@property (readonly) NSUInteger maxTextureDimensionCube;
@property (readonly) NSUInteger maxTextureHeight2D;
@property (readonly) NSUInteger maxTextureHeight3D;
@property (readonly) NSUInteger maxTextureLayers;
@property (readonly) NSUInteger maxTextureWidth1D;
@property (readonly) NSUInteger maxTextureWidth2D;
@property (readonly) NSUInteger maxTextureWidth3D;
@property (readonly) NSUInteger maxTileBuffers;
@property (readonly) NSUInteger maxTileInlineDataSize;
@property (readonly) NSUInteger maxTileSamplers;
@property (readonly) NSUInteger maxTileTextures;
@property (readonly) NSUInteger maxTotalComputeThreadsPerThreadgroup;
@property (readonly) NSUInteger maxVertexAmplificationCount;
@property (readonly) NSUInteger maxVertexAmplificationFactor;
@property (readonly) NSUInteger maxVertexAttributes;
@property (readonly) NSUInteger maxVertexBuffers;
@property (readonly) NSUInteger maxVertexInlineDataSize;
@property (readonly) NSUInteger maxVertexSamplers;
@property (readonly) NSUInteger maxVertexTextures;
@property (readonly) NSUInteger maxViewportCount;
@property (readonly) NSUInteger maxVisibilityQueryOffset;
@property (readonly) NSUInteger minBufferNoCopyAlignmentBytes;
@property (readonly) NSUInteger minConstantBufferAlignmentBytes;
@property (readonly) NSUInteger minTilePixels;
@property (readonly, getter=isMsaa32bSupported) BOOL msaa32bSupported;
@property (readonly) NSString *name;
@property (readonly, getter=isPlacementHeapSupported) BOOL placementHeapSupported;
@property (copy, nonatomic) NSDictionary *pluginData;
@property (readonly, getter=areRasterOrderGroupsSupported) BOOL rasterOrderGroupsSupported;
@property (readonly) NSUInteger readWriteTextureSupport;
@property (readonly) BOOL requiresRaytracingEmulation;
@property (readonly) NSObject<OS_dispatch_queue> *serialQueue; // ivar: _serialQueue
@property BOOL shaderDebugInfoCaching; // ivar: _shaderDebugInfoCaching
@property (readonly) NSUInteger sparseTexturesSupport;
@property (readonly) NSUInteger sparseTileSizeInBytes;
@property (readonly, nonatomic) BOOL supports2DLinearTexArraySPI;
@property (readonly, nonatomic) BOOL supports32BitFloatFiltering;
@property (readonly, nonatomic) BOOL supports32BitMSAA;
@property (readonly, nonatomic) BOOL supports32bpcMSAATextures;
@property (readonly, nonatomic) BOOL supports3DASTCTextures;
@property (readonly, nonatomic) BOOL supports3DBCTextures;
@property (readonly, nonatomic) BOOL supportsASTCHDRTextureCompression;
@property (readonly, nonatomic) BOOL supportsASTCTextureCompression;
@property (readonly, nonatomic) BOOL supportsAlphaYUVFormats;
@property (readonly, nonatomic) BOOL supportsAnisoSampleFix;
@property (readonly, nonatomic) BOOL supportsArgumentBuffersTier2;
@property (readonly, nonatomic) BOOL supportsArrayOfSamplers;
@property (readonly, nonatomic) BOOL supportsArrayOfTextures;
@property (readonly, nonatomic) BOOL supportsBCTextureCompression;
@property (readonly, nonatomic) BOOL supportsBGR10A2;
@property (readonly, nonatomic) BOOL supportsBaseVertexInstanceDrawing;
@property (readonly, nonatomic) BOOL supportsBfloat16Format;
@property (readonly, nonatomic) BOOL supportsBinaryArchives;
@property (readonly, nonatomic) BOOL supportsBinaryLibraries;
@property (readonly, nonatomic) BOOL supportsBlackOrWhiteSamplerBorderColors;
@property (readonly, nonatomic) BOOL supportsBufferBoundsChecking;
@property (readonly, nonatomic) BOOL supportsBufferPrefetchStatistics;
@property (readonly, nonatomic) BOOL supportsBufferWithIOSurface;
@property (readonly, nonatomic) BOOL supportsBufferlessClientStorageTexture;
@property (readonly, nonatomic) BOOL supportsCMPIndirectCommandBuffers;
@property (readonly, nonatomic) BOOL supportsCombinedMSAAStoreAndResolveAction;
@property (readonly, nonatomic) BOOL supportsCommandBufferJump;
@property (readonly, nonatomic) BOOL supportsCompressedTextureViewSPI;
@property (readonly, nonatomic) BOOL supportsComputeCompressedTextureWrite;
@property (readonly, nonatomic) BOOL supportsComputeMemoryBarrier;
@property (readonly, nonatomic) BOOL supportsConcurrentComputeDispatch;
@property (readonly, nonatomic) BOOL supportsCountingOcclusionQuery;
@property (readonly, nonatomic) BOOL supportsCustomBorderColor;
@property (readonly, nonatomic) BOOL supportsDeadlineProfile;
@property (readonly, nonatomic) BOOL supportsDepthClipMode;
@property (readonly, nonatomic) BOOL supportsDepthClipModeClampExtended;
@property (readonly, nonatomic) BOOL supportsDevicePartitioning;
@property (readonly, nonatomic) BOOL supportsDynamicControlPointCount;
@property (readonly, nonatomic) BOOL supportsDynamicLibraries;
@property (readonly, nonatomic) BOOL supportsExplicitVisibilityGroups;
@property (readonly, nonatomic) BOOL supportsExtendedXR10Formats;
@property (readonly, nonatomic) BOOL supportsExtendedYUVFormats;
@property (readonly, nonatomic) BOOL supportsFP32TessFactors;
@property (readonly, nonatomic) BOOL supportsFastMathInfNaNPropagation;
@property (readonly, nonatomic) BOOL supportsFillTexture;
@property (readonly, nonatomic) BOOL supportsFixedLinePointFillDepthGradient;
@property (readonly, nonatomic) BOOL supportsFloat16BCubicFiltering;
@property (readonly, nonatomic) BOOL supportsFloat16InfNanFiltering;
@property (readonly, nonatomic) BOOL supportsForceSeamsOnCubemaps;
@property (readonly, nonatomic) BOOL supportsForkJoin;
@property (readonly, nonatomic) BOOL supportsFragmentBufferWrites;
@property (readonly, nonatomic) BOOL supportsFragmentOnlyEncoders;
@property (readonly, nonatomic) BOOL supportsFunctionPointers;
@property (readonly, nonatomic) BOOL supportsFunctionPointersFromMesh;
@property (readonly, nonatomic) BOOL supportsFunctionPointersFromRender;
@property (readonly, nonatomic) BOOL supportsGFXIndirectCommandBuffers;
@property (readonly, nonatomic) BOOL supportsGPUStatistics;
@property (readonly, nonatomic) BOOL supportsGlobalVariableRelocation;
@property (readonly, nonatomic) BOOL supportsGlobalVariableRelocationCompute;
@property (readonly, nonatomic) BOOL supportsGlobalVariableRelocationRender;
@property (readonly, nonatomic) BOOL supportsHeapAccelerationStructureAllocation;
@property (readonly, nonatomic) BOOL supportsIABHashForTools;
@property (readonly, nonatomic) BOOL supportsImageBlockSampleCoverageControl;
@property (readonly, nonatomic) BOOL supportsImageBlocks;
@property (readonly, nonatomic) BOOL supportsIndirectDrawAndDispatch;
@property (readonly, nonatomic) BOOL supportsIndirectStageInRegion;
@property (readonly, nonatomic) BOOL supportsIndirectTessellation;
@property (readonly, nonatomic) BOOL supportsIndirectTextures;
@property (readonly, nonatomic) BOOL supportsIndirectWritableTextures;
@property (readonly, nonatomic) BOOL supportsInt64;
@property (readonly, nonatomic) BOOL supportsInterchangeTiled;
@property (readonly, nonatomic) BOOL supportsInvariantVertexPosition;
@property (readonly, nonatomic) BOOL supportsLargeFramebufferConfigs;
@property (readonly, nonatomic) BOOL supportsLateEvalEvent;
@property (readonly, nonatomic) BOOL supportsLayeredRendering;
@property (readonly, nonatomic) BOOL supportsLimitedYUVFormats;
@property (readonly, nonatomic) BOOL supportsLinearTexture2DArray;
@property (readonly, nonatomic) BOOL supportsLinearTextureFromSharedBuffer;
@property (readonly, nonatomic) BOOL supportsLossyCompression;
@property (readonly, nonatomic) BOOL supportsMSAADepthResolve;
@property (readonly, nonatomic) BOOL supportsMSAADepthResolveFilter;
@property (readonly, nonatomic) BOOL supportsMSAAStencilResolve;
@property (readonly, nonatomic) BOOL supportsMSAAStencilResolveFilter;
@property (readonly, nonatomic) BOOL supportsMemoryOrderAtomics;
@property (readonly, nonatomic) BOOL supportsMemorylessRenderTargets;
@property (readonly, nonatomic) BOOL supportsMeshShaders;
@property (readonly, nonatomic) BOOL supportsMeshShadersInICB;
@property (readonly, nonatomic) BOOL supportsMipLevelsSmallerThanBlockSize;
@property (readonly, nonatomic) BOOL supportsMirrorClampToEdgeSamplerMode;
@property (readonly, nonatomic) BOOL supportsMutableTier1ArgumentBuffers;
@property (readonly, nonatomic) BOOL supportsNativeHardwareFP16;
@property (readonly, nonatomic) BOOL supportsNonPrivateDepthStencilTextures;
@property (readonly, nonatomic) BOOL supportsNonPrivateMSAATextures;
@property (readonly, nonatomic) BOOL supportsNonSquareTileShaders;
@property (readonly, nonatomic) BOOL supportsNonUniformThreadgroupSize;
@property (readonly, nonatomic) BOOL supportsNonZeroTextureWriteLOD;
@property (readonly, nonatomic) BOOL supportsNorm16BCubicFiltering;
@property (readonly, nonatomic) BOOL supportsOpenCLTextureWriteSwizzles;
@property (readonly, nonatomic) BOOL supportsPacked32TextureBufferWrites;
@property (readonly, nonatomic) BOOL supportsPipelineLibraries;
@property (readonly, nonatomic) BOOL supportsPlacementHeaps;
@property (readonly, nonatomic) BOOL supportsPostDepthCoverage;
@property (readonly, nonatomic) BOOL supportsPrimitiveMotionBlur;
@property (readonly, nonatomic) BOOL supportsPrimitiveRestartOverride;
@property (readonly, nonatomic) BOOL supportsProgrammableBlending;
@property (readonly, nonatomic) BOOL supportsProgrammableSamplePositions;
@property (readonly, nonatomic) BOOL supportsPublicXR10Formats;
@property (readonly, nonatomic) BOOL supportsPullModelInterpolation;
@property (readonly, nonatomic) BOOL supportsQuadGroup;
@property (readonly, nonatomic) BOOL supportsQuadReduction;
@property (readonly, nonatomic) BOOL supportsQuadShufflesAndBroadcast;
@property (readonly, nonatomic) BOOL supportsQueryTextureLOD;
@property (readonly, nonatomic) BOOL supportsRGBA10A2Gamma;
@property (readonly, nonatomic) BOOL supportsRTZRounding;
@property (readonly, nonatomic) BOOL supportsRasterOrderGroups;
@property (readonly, nonatomic) BOOL supportsRasterOrderGroupsColorAttachment;
@property (readonly, nonatomic) BOOL supportsRayTracingAccelerationStructureCPUDeserialization;
@property (readonly, nonatomic) BOOL supportsRayTracingBuffersFromTables;
@property (readonly, nonatomic) BOOL supportsRayTracingExtendedVertexFormats;
@property (readonly, nonatomic) BOOL supportsRayTracingICBs;
@property (readonly, nonatomic) BOOL supportsRayTracingPerPrimitiveData;
@property (readonly) BOOL supportsRaytracing;
@property (readonly, nonatomic) BOOL supportsRaytracingFromRender;
@property (readonly, nonatomic) BOOL supportsReadWriteBufferArguments;
@property (readonly, nonatomic) BOOL supportsReadWriteTextureArguments;
@property (readonly, nonatomic) BOOL supportsReadWriteTextureArgumentsTier2;
@property (readonly, nonatomic) BOOL supportsReadWriteTextureCubeArguments;
@property (readonly, nonatomic) BOOL supportsRelaxedTextureViewRequirements;
@property (readonly, nonatomic) BOOL supportsRenderDynamicLibraries;
@property (readonly, nonatomic) BOOL supportsRenderMemoryBarrier;
@property (readonly, nonatomic) BOOL supportsRenderPassWithoutRenderTarget;
@property (readonly, nonatomic) BOOL supportsRenderTargetTextureRotation;
@property (readonly, nonatomic) BOOL supportsRenderTextureWrites;
@property (readonly, nonatomic) BOOL supportsRenderToLinearTextures;
@property (readonly, nonatomic) BOOL supportsSIMDGroup;
@property (readonly, nonatomic) BOOL supportsSIMDGroupMatrix;
@property (readonly, nonatomic) BOOL supportsSIMDReduction;
@property (readonly, nonatomic) BOOL supportsSIMDShuffleAndFill;
@property (readonly, nonatomic) BOOL supportsSIMDShufflesAndBroadcast;
@property (readonly, nonatomic) BOOL supportsSRGBwrites;
@property (readonly, nonatomic) BOOL supportsSamplerAddressModeClampToHalfBorder;
@property (readonly, nonatomic) BOOL supportsSamplerCompareFunction;
@property (readonly, nonatomic) BOOL supportsSeparateDepthStencil;
@property (readonly, nonatomic) BOOL supportsSeparateVisibilityAndShadingRate;
@property (readonly, nonatomic) BOOL supportsSetThreadgroupPackingDisabled;
@property (readonly, nonatomic) BOOL supportsShaderBarycentricCoordinates;
@property (readonly, nonatomic) BOOL supportsShaderLODAverage;
@property (readonly, nonatomic) BOOL supportsShaderMinLODClamp;
@property (readonly, nonatomic) BOOL supportsSharedFunctionTables;
@property (readonly, nonatomic) BOOL supportsSharedStorageHeapResources;
@property (readonly, nonatomic) BOOL supportsSharedStorageTextures;
@property (readonly, nonatomic) BOOL supportsSharedTextureHandles;
@property (readonly, nonatomic) BOOL supportsSparseDepthAttachments;
@property (readonly, nonatomic) BOOL supportsSparseHeaps;
@property (readonly, nonatomic) BOOL supportsSparseTextures;
@property (readonly, nonatomic) BOOL supportsStackOverflowErrorCode;
@property (readonly, nonatomic) BOOL supportsStatefulDynamicLibraries;
@property (readonly, nonatomic) BOOL supportsStencilFeedback;
@property (readonly, nonatomic) BOOL supportsStreamingCodecSignaling;
@property (readonly, nonatomic) BOOL supportsTLS;
@property (readonly, nonatomic) BOOL supportsTessellation;
@property (readonly, nonatomic) BOOL supportsTexture2DMultisampleArray;
@property (readonly, nonatomic) BOOL supportsTextureCubeArray;
@property (readonly, nonatomic) BOOL supportsTextureOutOfBoundsReads;
@property (readonly, nonatomic) BOOL supportsTextureSwizzle;
@property (readonly, nonatomic) BOOL supportsTileShaders;
@property (readonly, nonatomic) BOOL supportsUnalignedVertexFetch;
@property (readonly, nonatomic) BOOL supportsVariableRateRasterization;
@property (readonly, nonatomic) BOOL supportsVertexAmplification;
@property (readonly, nonatomic) BOOL supportsViewportAndScissorArray;
@property (readonly, nonatomic) BOOL supportsWritableArrayOfTextures;
@property (readonly, nonatomic) BOOL supportsYCBCRFormats;
@property (readonly, nonatomic) BOOL supportsYCBCRFormats12;
@property (readonly, nonatomic) BOOL supportsYCBCRFormatsPQ;
@property (readonly, nonatomic) BOOL supportsYCBCRFormatsXR;
@property (readonly, nonatomic) BOOL supportsYCBCRPackedFormats12;
@property (readonly, nonatomic) BOOL supportsYCBCRPackedFormatsPQ;
@property (readonly, nonatomic) BOOL supportsYCBCRPackedFormatsXR;
@property (readonly) MTLTargetDeviceArchitecture *targetDeviceArchitecture;
@property (readonly) *MTLTargetDeviceArch targetDeviceInfo;


+(BOOL)featureProfile:(NSUInteger)arg0 supportsFeatureSet:(NSUInteger)arg1 ;
+(BOOL)useNewPrimitiveRestartBehavior;
-(*char *)newTranslatedDriverCompilerOptions:(id)arg0 compilerOptionsSize:(*NSUInteger)arg1 ;
-(*void)computeFunctionKeyWithComputePipelineDescriptor:(id)arg0 options:(NSUInteger)arg1 keySize:(*NSUInteger)arg2 ;
-(*void)fragmentFunctionKeyWithRenderPipelineDescriptor:(id)arg0 options:(NSUInteger)arg1 previousStateVariant:(id)arg2 fragmentKeySize:(*NSUInteger)arg3 ;
-(*void)getShaderCacheKeys;
-(*void)libraryKeyWithComputePipelineDescriptor:(id)arg0 options:(NSUInteger)arg1 keySize:(*NSUInteger)arg2 ;
-(*void)meshFunctionKeyWithRenderPipelineDescriptor:(id)arg0 options:(NSUInteger)arg1 nextStageVariant:(id)arg2 meshKeySize:(*NSUInteger)arg3 ;
-(*void)objectFunctionKeyWithRenderPipelineDescriptor:(id)arg0 options:(NSUInteger)arg1 nextStageVariant:(id)arg2 objectKeySize:(*NSUInteger)arg3 ;
-(*void)vertexFunctionKeyWithRenderPipelineDescriptor:(id)arg0 options:(NSUInteger)arg1 nextStageVariant:(id)arg2 vertexKeySize:(*NSUInteger)arg3 ;
-(*void)visibleFunctionKey:(id)arg0 withFunctionDescriptor:(id)arg1 keySize:(*NSUInteger)arg2 ;
-(BOOL)areProgrammableSamplePositionsSupported;
-(BOOL)copyShaderCacheToPath:(id)arg0 ;
-(BOOL)deviceOrFeatureProfileSupportsFeatureSet:(NSUInteger)arg0 ;
-(BOOL)deviceSupportsFeatureSet:(NSUInteger)arg0 ;
-(BOOL)isClampToHalfBorderSupported;
-(BOOL)isCollectingLibraries;
-(BOOL)isCollectingPipelines;
-(BOOL)isCompatibleWithAccelerationStructure:(struct ? )arg0 ;
-(BOOL)isCustomBorderColorSupported;
-(BOOL)isMagicMipmapSupported;
-(BOOL)isQuadDataSharingSupported;
-(BOOL)supportsCounterSampling:(NSUInteger)arg0 ;
-(BOOL)supportsFamily:(NSInteger)arg0 ;
-(BOOL)supportsFeatureSet:(NSUInteger)arg0 ;
-(BOOL)supportsPrimitiveType:(NSUInteger)arg0 ;
-(BOOL)supportsRasterizationRateMapWithLayerCount:(NSUInteger)arg0 ;
-(BOOL)supportsTextureSampleCount:(NSUInteger)arg0 ;
-(BOOL)supportsTextureWriteFPRoundingMode:(NSInteger)arg0 ;
-(BOOL)supportsTextureWriteRoundingMode:(NSInteger)arg0 ;
-(BOOL)validateDynamicLibrary:(id)arg0 state:(BOOL)arg1 error:(*id)arg2 ;
-(BOOL)validateDynamicLibraryDescriptor:(id)arg0 error:(*id)arg1 ;
-(BOOL)validateDynamicLibraryURL:(id)arg0 error:(*id)arg1 ;
-(NSUInteger)getSupportedCommandBufferErrorOptions;
-(NSUInteger)minLinearTextureAlignmentForPixelFormat:(NSUInteger)arg0 ;
-(NSUInteger)minimumLinearTextureAlignmentForPixelFormat:(NSUInteger)arg0 ;
-(NSUInteger)optionsForPipelineLibrarySerialization;
-(NSUInteger)sparseTileSizeInBytesForSparsePageSize:(NSInteger)arg0 ;
-(char *)getComputeFunctionId:(*void)arg0 compilerOptions:(*char *)arg1 compilerOptionsSize:(NSUInteger)arg2 ;
-(char *)getComputeFunctionId:(*void)arg0 function:(id)arg1 compilerOptions:(*char *)arg2 compilerOptionsSize:(NSUInteger)arg3 ;
-(char *)getFragmentFunctionId:(*void)arg0 compilerOptions:(*char *)arg1 compilerOptionsSize:(NSUInteger)arg2 ;
-(char *)getMeshFunctionId:(*void)arg0 compilerOptions:(*char *)arg1 compilerOptionsSize:(NSUInteger)arg2 ;
-(char *)getObjectFunctionId:(*void)arg0 compilerOptions:(*char *)arg1 compilerOptionsSize:(NSUInteger)arg2 ;
-(char *)getVertexFunctionId:(*void)arg0 compilerOptions:(*char *)arg1 compilerOptionsSize:(NSUInteger)arg2 ;
-(char *)getVertexFunctionId:(*void)arg0 compilerOptions:(*char *)arg1 compilerOptionsSize:(NSUInteger)arg2 compiledFragmentVariant:(id)arg3 ;
-(char *)getVertexFunctionId:(*void)arg0 function:(id)arg1 compilerOptions:(*char *)arg2 compilerOptionsSize:(NSUInteger)arg3 compiledFragmentVariant:(id)arg4 ;
-(id)_deviceWrapper;
-(id)_newDynamicLibraryWithDescriptor:(id)arg0 computeDescriptor:(id)arg1 error:(*id)arg2 ;
-(id)akIOResourceListPool;
-(id)computeVariantWithCompilerOutput:(id)arg0 pipelineStatisticsOutput:(id)arg1 ;
-(id)description;
-(id)deserializeInstanceAccelerationStructureFromBytes:(*void)arg0 primitiveAccelerationStructures:(id)arg1 withDescriptor:(id)arg2 ;
-(id)deserializePrimitiveAccelerationStructureFromBytes:(*void)arg0 withDescriptor:(id)arg1 ;
-(id)endCollectingPipelineDescriptors;
-(id)familyName;
-(id)formattedDescription:(NSUInteger)arg0 ;
-(id)fragmentVariantWithCompilerOutput:(id)arg0 pipelineStatisticsOutput:(id)arg1 ;
-(id)getMostCompatibleArchitecture:(id)arg0 ;
-(id)getRawBVHBuilderPtr;
-(id)init;
-(id)initWithAcceleratorPort:(unsigned int)arg0 ;
-(id)loadDynamicLibrariesForComputeDescriptor:(id)arg0 error:(*id)arg1 ;
-(id)loadDynamicLibrariesForComputeDescriptor:(id)arg0 options:(NSUInteger)arg1 error:(*id)arg2 ;
-(id)loadDynamicLibrariesForFunction:(id)arg0 insertLibraries:(id)arg1 error:(*id)arg2 ;
-(id)loadDynamicLibrariesForFunction:(id)arg0 insertLibraries:(id)arg1 options:(NSUInteger)arg2 error:(*id)arg3 ;
-(id)lookupRecompiledBinaryArchive:(id)arg0 ;
-(id)newAccelerationStructureWithBuffer:(id)arg0 offset:(NSUInteger)arg1 ;
-(id)newAccelerationStructureWithBuffer:(id)arg0 offset:(NSUInteger)arg1 resourceIndex:(NSUInteger)arg2 ;
-(id)newAccelerationStructureWithDescriptor:(id)arg0 ;
-(id)newAccelerationStructureWithSize:(NSUInteger)arg0 ;
-(id)newAccelerationStructureWithSize:(NSUInteger)arg0 resourceIndex:(NSUInteger)arg1 ;
-(id)newAccelerationStructureWithSize:(NSUInteger)arg0 withDescriptor:(id)arg1 ;
-(id)newArgumentEncoderWithArguments:(id)arg0 ;
-(id)newArgumentEncoderWithArguments:(id)arg0 structType:(*id)arg1 ;
-(id)newArgumentEncoderWithBufferBinding:(id)arg0 ;
-(id)newArgumentEncoderWithLayout:(id)arg0 ;
-(id)newBinaryArchiveWithDescriptor:(id)arg0 error:(*id)arg1 ;
-(id)newBinaryLibraryWithOptions:(NSUInteger)arg0 url:(id)arg1 error:(*id)arg2 ;
-(id)newCommandQueue;
-(id)newCommandQueueWithDescriptor:(id)arg0 ;
-(id)newCommandQueueWithMaxCommandBufferCount:(NSUInteger)arg0 ;
-(id)newComputePipelineDescriptorWithSerializedData:(id)arg0 deserializationContext:(id)arg1 ;
-(id)newComputePipelineStateWithDescriptor:(id)arg0 error:(*id)arg1 ;
-(id)newComputePipelineStateWithDescriptor:(id)arg0 options:(NSUInteger)arg1 reflection:(*id)arg2 error:(*id)arg3 ;
-(id)newComputePipelineStateWithFunction:(id)arg0 error:(*id)arg1 ;
-(id)newComputePipelineStateWithFunction:(id)arg0 options:(NSUInteger)arg1 reflection:(*id)arg2 error:(*id)arg3 ;
-(id)newComputePipelineStateWithImageFilterFunctionsSPI:(id)arg0 imageFilterFunctionInfo:(struct ? *)arg1 error:(*id)arg2 ;
-(id)newComputePipelineWithDescriptor:(id)arg0 variant:(id)arg1 ;
-(id)newComputePipelineWithDescriptor:(id)arg0 variant:(id)arg1 errorMessage:(*id)arg2 ;
-(id)newComputeVariantWithCompilerOutput:(id)arg0 pipelineStatisticsOutput:(id)arg1 ;
-(id)newCounterSampleBufferWithDescriptor:(id)arg0 error:(*id)arg1 ;
-(id)newDagStringWithGraphs:(id)arg0 ;
-(id)newDefaultLibrary;
-(id)newDefaultLibraryWithBundle:(id)arg0 error:(*id)arg1 ;
-(id)newDynamicLibrary:(id)arg0 computeDescriptor:(id)arg1 error:(*id)arg2 ;
-(id)newDynamicLibrary:(id)arg0 error:(*id)arg1 ;
-(id)newDynamicLibraryError:(NSUInteger)arg0 message:(id)arg1 ;
-(id)newDynamicLibraryFromURL:(id)arg0 error:(*id)arg1 ;
-(id)newDynamicLibraryWithDescriptor:(id)arg0 error:(*id)arg1 ;
-(id)newDynamicLibraryWithURL:(id)arg0 error:(*id)arg1 ;
-(id)newDynamicLibraryWithURL:(id)arg0 options:(NSUInteger)arg1 error:(*id)arg2 ;
-(id)newEvent;
-(id)newFragmentVariantWithCompilerOutput:(id)arg0 pipelineStatisticsOutput:(id)arg1 ;
-(id)newFunctionWithGLCoreIR:(*void)arg0 functionType:(NSUInteger)arg1 ;
-(id)newFunctionWithGLCoreIR:(*void)arg0 inputsDescription:(id)arg1 functionType:(NSUInteger)arg2 ;
-(id)newFunctionWithGLESIR:(*void)arg0 functionType:(NSUInteger)arg1 ;
-(id)newFunctionWithGLESIR:(*void)arg0 inputsDescription:(id)arg1 functionType:(NSUInteger)arg2 ;
-(id)newFunctionWithGLIR:(*void)arg0 functionType:(NSUInteger)arg1 ;
-(id)newFunctionWithGLIR:(*void)arg0 inputsDescription:(id)arg1 functionType:(NSUInteger)arg2 ;
-(id)newIOCommandQueueWithDescriptor:(id)arg0 error:(*id)arg1 ;
-(id)newIOHandleWithURL:(id)arg0 compressionMethod:(NSInteger)arg1 error:(*id)arg2 ;
-(id)newIOHandleWithURL:(id)arg0 compressionType:(NSInteger)arg1 error:(*id)arg2 ;
-(id)newIOHandleWithURL:(id)arg0 error:(*id)arg1 ;
-(id)newLateEvalEvent;
-(id)newLibraryWithCIFilters:(id)arg0 imageFilterFunctionInfo:(struct ? *)arg1 error:(*id)arg2 ;
-(id)newLibraryWithDAG:(id)arg0 functions:(id)arg1 error:(*id)arg2 ;
-(id)newLibraryWithData:(id)arg0 error:(*id)arg1 ;
-(id)newLibraryWithDescriptor:(id)arg0 destinationBinaryArchive:(id)arg1 error:(*id)arg2 ;
-(id)newLibraryWithDescriptor:(id)arg0 error:(*id)arg1 ;
-(id)newLibraryWithDescriptorSPI:(id)arg0 error:(*id)arg1 ;
-(id)newLibraryWithFile:(id)arg0 error:(*id)arg1 ;
-(id)newLibraryWithImageFilterFunctionsSPI:(id)arg0 imageFilterFunctionInfo:(struct ? *)arg1 error:(*id)arg2 ;
-(id)newLibraryWithSource:(id)arg0 options:(id)arg1 error:(*id)arg2 ;
-(id)newLibraryWithStitchedDescriptor:(id)arg0 destinationBinaryArchive:(id)arg1 error:(*id)arg2 ;
-(id)newLibraryWithStitchedDescriptor:(id)arg0 error:(*id)arg1 ;
-(id)newLibraryWithStitchedDescriptorSPI:(id)arg0 error:(*id)arg1 ;
-(id)newLibraryWithURL:(id)arg0 error:(*id)arg1 ;
-(id)newMeshRenderPipelineDescriptorWithSerializedData:(id)arg0 deserializationContext:(id)arg1 ;
-(id)newMeshVariantWithCompilerOutput:(id)arg0 pipelineStatisticsOutput:(id)arg1 ;
-(id)newObjectVariantWithCompilerOutput:(id)arg0 pipelineStatisticsOutput:(id)arg1 ;
-(id)newPipelineLibraryWithFilePath:(id)arg0 error:(*id)arg1 ;
-(id)newProfileWithExecutionSize:(NSUInteger)arg0 ;
-(id)newRasterizationRateMapWithDescriptor:(id)arg0 ;
-(id)newRasterizationRateMapWithScreenSize:(struct ? )arg0 layerCount:(NSUInteger)arg1 layers:(*id)arg2 ;
-(id)newRenderPipelineDescriptorWithSerializedData:(id)arg0 deserializationContext:(id)arg1 ;
-(id)newRenderPipelineStateWithDescriptor:(id)arg0 error:(*id)arg1 ;
-(id)newRenderPipelineStateWithDescriptor:(id)arg0 options:(NSUInteger)arg1 reflection:(*id)arg2 error:(*id)arg3 ;
-(id)newRenderPipelineStateWithMeshDescriptor:(id)arg0 error:(*id)arg1 ;
-(id)newRenderPipelineStateWithMeshDescriptor:(id)arg0 options:(NSUInteger)arg1 reflection:(*id)arg2 error:(*id)arg3 ;
-(id)newRenderPipelineStateWithTileDescriptor:(id)arg0 options:(NSUInteger)arg1 reflection:(*id)arg2 error:(*id)arg3 ;
-(id)newRenderPipelineWithDescriptor:(id)arg0 objectVariant:(id)arg1 meshVariant:(id)arg2 fragmentVariant:(id)arg3 errorMessage:(*id)arg4 ;
-(id)newRenderPipelineWithDescriptor:(id)arg0 vertexVariant:(id)arg1 fragmentVariant:(id)arg2 ;
-(id)newRenderPipelineWithDescriptor:(id)arg0 vertexVariant:(id)arg1 fragmentVariant:(id)arg2 errorMessage:(*id)arg3 ;
-(id)newSharedEvent;
-(id)newSharedEventWithHandle:(id)arg0 ;
-(id)newSharedEventWithMachPort:(unsigned int)arg0 ;
-(id)newSharedTextureWithDescriptor:(id)arg0 ;
-(id)newSharedTextureWithHandle:(id)arg0 ;
-(id)newStructTypeWithSerializedData:(id)arg0 ;
-(id)newTileRenderPipelineDescriptorWithSerializedData:(id)arg0 deserializationContext:(id)arg1 ;
-(id)newUncachedIOHandleWithURL:(id)arg0 compressionType:(NSInteger)arg1 error:(*id)arg2 ;
-(id)newUncachedIOHandleWithURL:(id)arg0 error:(*id)arg1 ;
-(id)newVertexVariantWithCompilerOutput:(id)arg0 pipelineStatisticsOutput:(id)arg1 ;
-(id)pipelinePerformanceStatisticsWithComputeVariant:(id)arg0 ;
-(id)pipelinePerformanceStatisticsWithComputeVariant:(id)arg0 compileTimeOutput:(id)arg1 ;
-(id)pipelinePerformanceStatisticsWithObjectVariant:(id)arg0 meshVariant:(id)arg1 fragmentVariant:(id)arg2 objectCompileTimeOutput:(id)arg3 meshCompileTimeOutput:(id)arg4 fragmentCompileTimeOutput:(id)arg5 ;
-(id)pipelinePerformanceStatisticsWithVertexVariant:(id)arg0 fragmentVariant:(id)arg1 ;
-(id)pipelinePerformanceStatisticsWithVertexVariant:(id)arg0 fragmentVariant:(id)arg1 vertexCompileTimeOutput:(id)arg2 fragmentCompileTimeOutput:(id)arg3 ;
-(id)productName;
-(id)resolveCounters:(id)arg0 withRange:(struct _NSRange )arg1 ;
-(id)serializeComputePipelineDescriptor:(id)arg0 ;
-(id)serializeMeshRenderPipelineDescriptor:(id)arg0 ;
-(id)serializeRenderPipelineDescriptor:(id)arg0 ;
-(id)serializeStructType:(id)arg0 ;
-(id)serializeStructType:(id)arg0 version:(unsigned int)arg1 ;
-(id)serializeTileRenderPipelineDescriptor:(id)arg0 ;
-(id)vendorName;
-(id)vertexVariantWithCompilerOutput:(id)arg0 pipelineStatisticsOutput:(id)arg1 ;
-(struct ? )accelerationStructureSizesWithDescriptor:(id)arg0 ;
-(struct ? )heapAccelerationStructureSizeAndAlignWithDescriptor:(id)arg0 ;
-(struct ? )heapAccelerationStructureSizeAndAlignWithSize:(NSUInteger)arg0 ;
-(struct ? )libraryCacheStats;
-(struct ? )pipelineCacheStats;
-(struct ? )pipelineFlagsWithComputeVariant:(id)arg0 ;
-(struct ? )pipelineFlagsWithObjectVariant:(id)arg0 meshVariant:(id)arg1 fragmentVariant:(id)arg2 ;
-(struct ? )pipelineFlagsWithVertexVariant:(id)arg0 fragmentVariant:(id)arg1 ;
-(struct os_unfair_lock_s *)getBVHBuilderLock;
-(unsigned int)maximumComputeSubstreams;
-(void)_decrementCommandQueueCount;
-(void)_incrementCommandQueueCount;
-(void)_purgeDevice;
-(void)_setDeviceWrapper:(id)arg0 ;
-(void)allowLibrariesFromOtherPlatforms;
-(void)compileVisibleFunction:(id)arg0 withDescriptor:(id)arg1 completionHandler:(id)arg2 ;
-(void)compileVisibleFunction:(id)arg0 withDescriptor:(id)arg1 destinationBinaryArchive:(id)arg2 error:(*id)arg3 ;
-(void)compileVisibleFunction:(id)arg0 withDescriptor:(id)arg1 error:(*id)arg2 ;
-(void)compilerPropagatesThreadPriority:(BOOL)arg0 ;
-(void)convertSparsePixelRegions:(struct ? *)arg0 toTileRegions:(struct ? *)arg1 withTileSize:(struct ? )arg2 alignmentMode:(NSUInteger)arg3 numRegions:(NSUInteger)arg4 ;
-(void)convertSparseTileRegions:(struct ? *)arg0 toPixelRegions:(struct ? *)arg1 withTileSize:(struct ? )arg2 numRegions:(NSUInteger)arg3 ;
-(void)dealloc;
-(void)deserializeCompileTimeStats:(id)arg0 addToDictionary:(id)arg1 ;
-(void)deserializeInstanceAccelerationStructure:(id)arg0 fromBytes:(*void)arg1 primitiveAccelerationStructures:(id)arg2 withDescriptor:(id)arg3 ;
-(void)deserializeInstanceAccelerationStructureFromBytes:(*void)arg0 toBuffer:(id)arg1 primitiveAccelerationStructures:(id)arg2 forAccelerationStructure:(id)arg3 ;
-(void)deserializePrimitiveAccelerationStructure:(id)arg0 fromBytes:(*void)arg1 withDescriptor:(id)arg2 ;
-(void)deserializePrimitiveAccelerationStructureFromBytes:(*void)arg0 toBuffer:(id)arg1 forAccelerationStructure:(id)arg2 ;
-(void)dumpPipelineDescriptorsIfRequested;
-(void)freeComputeFunctionKey:(*void)arg0 keySize:(NSUInteger)arg1 ;
-(void)freeComputeLibraryKey:(*void)arg0 libraryKeySize:(NSUInteger)arg1 ;
-(void)freeFragmentFunctionKey:(*void)arg0 fragmentKeySize:(NSUInteger)arg1 ;
-(void)freeMeshFunctionKey:(*void)arg0 meshKeySize:(NSUInteger)arg1 ;
-(void)freeObjectFunctionKey:(*void)arg0 objectKeySize:(NSUInteger)arg1 ;
-(void)freeTranslatedDriverCompilerOptions:(*char *)arg0 compilerOptionsSize:(NSUInteger)arg1 ;
-(void)freeVertexFunctionKey:(*void)arg0 vertexKeySize:(NSUInteger)arg1 ;
-(void)freeVisibleFunctionKey:(*void)arg0 keySize:(NSUInteger)arg1 ;
-(void)getConstantSamplersBitmasks:(**NSUInteger)arg0 uniqueIdentifiers:(**NSUInteger)arg1 constantSamplerCount:(*NSUInteger)arg2 forComputeVariant:(id)arg3 ;
-(void)getConstantSamplersBitmasks:(**NSUInteger)arg0 uniqueIdentifiers:(**NSUInteger)arg1 constantSamplerCount:(*NSUInteger)arg2 forObjectVariant:(id)arg3 meshVariant:(id)arg4 fragmentVariant:(id)arg5 ;
-(void)getConstantSamplersBitmasks:(**NSUInteger)arg0 uniqueIdentifiers:(**NSUInteger)arg1 constantSamplerCount:(*NSUInteger)arg2 forVertexVariant:(id)arg3 fragmentVariant:(id)arg4 ;
-(void)getDefaultSamplePositions:(struct ? *)arg0 count:(NSUInteger)arg1 ;
-(void)initFeatureQueries;
-(void)initGPUFamilySupport;
-(void)initLimits;
-(void)initProgressTracking;
-(void)initSerializationPaths;
-(void)newComputePipelineStateWithDescriptor:(id)arg0 completionHandler:(id)arg1 ;
-(void)newComputePipelineStateWithDescriptor:(id)arg0 options:(NSUInteger)arg1 completionHandler:(id)arg2 ;
-(void)newComputePipelineStateWithFunction:(id)arg0 completionHandler:(id)arg1 ;
-(void)newComputePipelineStateWithFunction:(id)arg0 options:(NSUInteger)arg1 completionHandler:(id)arg2 ;
-(void)newLibraryWithDescriptor:(id)arg0 completionHandler:(id)arg1 ;
-(void)newLibraryWithSource:(id)arg0 options:(id)arg1 completionHandler:(id)arg2 ;
-(void)newLibraryWithStitchedDescriptor:(id)arg0 completionHandler:(id)arg1 ;
-(void)newRenderPipelineStateWithDescriptor:(id)arg0 completionHandler:(id)arg1 ;
-(void)newRenderPipelineStateWithDescriptor:(id)arg0 options:(NSUInteger)arg1 completionHandler:(id)arg2 ;
-(void)newRenderPipelineStateWithMeshDescriptor:(id)arg0 completionHandler:(id)arg1 ;
-(void)newRenderPipelineStateWithMeshDescriptor:(id)arg0 options:(NSUInteger)arg1 completionHandler:(id)arg2 ;
-(void)newRenderPipelineStateWithTileDescriptor:(id)arg0 options:(NSUInteger)arg1 completionHandler:(id)arg2 ;
-(void)recordBinaryArchiveUsage:(id)arg0 ;
-(void)registerComputePipelineDescriptor:(id)arg0 ;
-(void)registerMeshRenderPipelineDescriptor:(id)arg0 ;
-(void)registerRenderPipelineDescriptor:(id)arg0 ;
-(void)registerTileRenderPipelineDescriptor:(id)arg0 ;
-(void)releaseCacheEntry:(struct MTLLibraryContainer *)arg0 ;
-(void)sampleTimestamps:(*NSUInteger)arg0 gpuTimestamp:(*NSUInteger)arg1 ;
-(void)setRawBVHBuilderPtr:(id)arg0 ;
-(void)startCollectingPipelineDescriptors;
-(void)startCollectingPipelineDescriptorsFromLibrary:(id)arg0 filePath:(id)arg1 ;
-(void)startCollectingPipelineDescriptorsUsingPrefixForNames:(id)arg0 ;
-(void)unloadShaderCaches;
-(void)updateAccelerationStructureDescriptor:(id)arg0 withDescriptor:(id)arg1 ;


@end


#endif